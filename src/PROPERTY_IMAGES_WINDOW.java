
import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Raja
 */
public class PROPERTY_IMAGES_WINDOW extends javax.swing.JFrame {

    /**
     * Creates new form PROPERTY_IMAGES_WINDOW
     */
    
        P_TYPE type = new P_TYPE();
        HashMap<String, Integer> map = type.getTypeMap();
        String property_image_path ="";
        int propertyId=0;
        
        
    public PROPERTY_IMAGES_WINDOW() {
        initComponents();
        setTitle("Property Image Window");
        // set the border to the jpanel tittle
        Border panel_tittle_border = BorderFactory.createMatteBorder(0, 0, 3, 0, new Color(255, 255, 255));
        jPanel_Tittle.setBorder(panel_tittle_border);
        
        // set thewhite  border to the jlabel image
        Border jlabel_image_border = BorderFactory.createMatteBorder(1, 1, 1, 1, new Color(255, 255, 255));
        jLabel_image.setBorder(jlabel_image_border);
        
        
        // populate the combobox with ttype name 
        
        bindCombo();
        
        //when the form show p
        // populate the jtable with all the properties
        fillJtableWithPropertiesData();
        
        
        jTable_properties.setRowHeight(40);
          //change the jtable selection background
        jTable_properties.setSelectionBackground(new Color(27, 150, 77));
          //change th ID column width
        jTable_properties.getColumnModel().getColumn(0).setPreferredWidth(25);
          //change th Address column width
        jTable_properties.getColumnModel().getColumn(1).setPreferredWidth(250);
       
        
        
    }
    
    // create a function to populate the Jcombobox with type data
    public void bindCombo() {

        for (String s : map.keySet()) {
            jComboBox_type.addItem(s);
        }

    }
    
    
    // create a function to populate the jtable with properies data 
    public void fillJtableWithPropertiesData() {

        P_PROPERTY property = new P_PROPERTY();

        ArrayList<P_PROPERTY> propertyList = property.propertiesList();

        // the jtable colums   0    1       
        String[] colNames = {"ID", "Address"};

        //the jtable row
        //owneerList.size()=the 
        Object[][] rows = new Object[propertyList.size()][2];

        // add data from the list to the rows
        for (int i = 0; i < propertyList.size(); i++) {

            rows[i][0] = propertyList.get(i).getId();
            rows[i][1] = propertyList.get(i).getAddress();

        }
        DefaultTableModel model = new DefaultTableModel(rows, colNames);
        jTable_properties.setModel(model);

    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel_Tittle = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton_Remove_property = new javax.swing.JButton();
        jButton_add_images = new javax.swing.JButton();
        jButton_show_images = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox_type = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_properties = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jButton_browse_images = new javax.swing.JButton();
        jLabel_image = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jPanel_Tittle.setBackground(new java.awt.Color(255, 51, 0));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Property-Images");

        javax.swing.GroupLayout jPanel_TittleLayout = new javax.swing.GroupLayout(jPanel_Tittle);
        jPanel_Tittle.setLayout(jPanel_TittleLayout);
        jPanel_TittleLayout.setHorizontalGroup(
            jPanel_TittleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_TittleLayout.createSequentialGroup()
                .addGap(383, 383, 383)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_TittleLayout.setVerticalGroup(
            jPanel_TittleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_TittleLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jButton_Remove_property.setBackground(new java.awt.Color(255, 0, 51));
        jButton_Remove_property.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton_Remove_property.setForeground(new java.awt.Color(255, 255, 255));
        jButton_Remove_property.setText("Remove");
        jButton_Remove_property.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jButton_Remove_property.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Remove_property.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Remove_propertyActionPerformed(evt);
            }
        });

        jButton_add_images.setBackground(new java.awt.Color(0, 204, 0));
        jButton_add_images.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton_add_images.setForeground(new java.awt.Color(255, 255, 255));
        jButton_add_images.setText("Add");
        jButton_add_images.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jButton_add_images.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_add_images.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_add_imagesActionPerformed(evt);
            }
        });

        jButton_show_images.setBackground(new java.awt.Color(51, 51, 255));
        jButton_show_images.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton_show_images.setForeground(new java.awt.Color(255, 255, 255));
        jButton_show_images.setText("Show the property Image ");
        jButton_show_images.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jButton_show_images.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_show_images.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_show_imagesActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Select a Type");

        jComboBox_type.setFont(new java.awt.Font("Tahoma", 3, 15)); // NOI18N
        jComboBox_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        jComboBox_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_typeActionPerformed(evt);
            }
        });

        jTable_properties.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable_properties.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_propertiesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_properties);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Select Images");

        jButton_browse_images.setBackground(new java.awt.Color(255, 255, 0));
        jButton_browse_images.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jButton_browse_images.setText("Browse");
        jButton_browse_images.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_browse_imagesActionPerformed(evt);
            }
        });

        jLabel_image.setBackground(new java.awt.Color(255, 204, 204));
        jLabel_image.setOpaque(true);

        jList1.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("<html>* this table contains the propertis id and address<br>"
            + "                      click on the button to show the images slider</html>");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        //make the jtable multiline
        jLabel6.setText("<html>* this list contains the image id<br> of the selected property<BR>(select the property from the table)</html>");

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("<html>* Select an item from the list to display<br>"
            + " or browse an image from form your computer </html>");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_Tittle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jComboBox_type, 0, 244, Short.MAX_VALUE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jButton_show_images, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel5))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_Remove_property, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton_browse_images, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE))
                        .addComponent(jLabel_image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_add_images, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel7))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel_Tittle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_browse_images, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jLabel_image, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_show_images, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_add_images, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton_Remove_property, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(54, 54, 54))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_show_imagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_show_imagesActionPerformed

        try {
            
        int rowIndex=jTable_properties.getSelectedRow();// select jtable row index
        int id=Integer.valueOf(jTable_properties.getValueAt(rowIndex, 0).toString());//get the id from the jtable
        //  first check if this property contains images
        // we will the jlist to do that 
        
            if (jList1.getModel().getSize() > 0) {
                //show the selected property images in a slider
                // set the id from the slider  form 
                PROPERTY_IMAGES_SLIDER imagesliderform = new PROPERTY_IMAGES_SLIDER(id);
                imagesliderform.setVisible(true);
                imagesliderform.pack();
                imagesliderform.setLocationRelativeTo(null);
                imagesliderform.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            }else{
            
                JOptionPane.showConfirmDialog(null,"This Propety Doesnot have any image","Pooperty Not Selected",2);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Select the propety First", "No Image Found", 2);
        }

        
        
    }//GEN-LAST:event_jButton_show_imagesActionPerformed

    private void jButton_add_imagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_add_imagesActionPerformed
       //add the images to hte property
       //you can add multiple images to a propertyif from j table 
       
        P_PROPERTY property = new P_PROPERTY();
        if (propertyId != 0) {
            if (property.addImageProperty(propertyId, property_image_path)) {
                JOptionPane.showMessageDialog(null, "Image Added to the Property", "Add Image", 1);
            } else {
                JOptionPane.showMessageDialog(null, "Image Not Added to the Property", "Add Image", 2);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select the Property", "Property Not Selected", 2);
        }
       
       
       
    }//GEN-LAST:event_jButton_add_imagesActionPerformed

    private void jButton_Remove_propertyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Remove_propertyActionPerformed

        try {
            // remove the selected images
        String selectedListItem = String.valueOf(jList1.getSelectedValue());
        if (selectedListItem != null) {
            try {
                Integer imageId = Integer.valueOf(selectedListItem);

                int yes_or_no = JOptionPane.showConfirmDialog(null, "Do You Really Want to Delete this Image", "Delete Property", JOptionPane.YES_NO_OPTION);
                if (yes_or_no == JOptionPane.YES_OPTION) {
                    if (new P_PROPERTY().removePropertyImage(imageId)) {
                        JOptionPane.showMessageDialog(null, "Property Image Deleted", "Deleted Property", JOptionPane.INFORMATION_MESSAGE);
                        jLabel_image.setIcon(null);
                    } else {
                        JOptionPane.showMessageDialog(null, "Operation failed Image is not Deleted", "Deleted Property", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid image ID", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select an image to delete", "Error", JOptionPane.ERROR_MESSAGE);
        }
        } catch (Exception e) {
             JOptionPane.showMessageDialog(null, "No Image is selected", "Deleted Image", 2);
        }

    }//GEN-LAST:event_jButton_Remove_propertyActionPerformed
 
    // create a function to resize the miages to the jtable 
    //make this function allow a byte[] paramamete
    public ImageIcon resizeImage(String path, byte[] byteImage) {
    ImageIcon pic = null;

    if (byteImage != null) {
        pic = new ImageIcon(byteImage);
    } else if (path != null) {
        // Load image from the provided path
        pic = new ImageIcon(path);
    } else {
        System.err.println("Both byteImage and path are null. Cannot create ImageIcon.");
        return null; // Return null if both inputs are invalid
    }

    // Resize the image
    Image img = pic.getImage().getScaledInstance(jLabel_image.getWidth(), jLabel_image.getHeight(), Image.SCALE_SMOOTH);
    ImageIcon image = new ImageIcon(img);
    return image;
}
    
    private void jButton_browse_imagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_browse_imagesActionPerformed
       
        // Browse image from the computer 
JFileChooser filechooser = new JFileChooser();
        filechooser.setDialogTitle("Select The Property Image");
// C:\\Images is where my images are located
        filechooser.setCurrentDirectory(new File("C:\\Images"));

// File extension filter
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("Images", ".jpg", ".png", ".jpeg");
        filechooser.addChoosableFileFilter(fileFilter);

        int fileState = filechooser.showOpenDialog(null); // Use showOpenDialog for selecting images

        if (fileState == JFileChooser.APPROVE_OPTION) {
            String path = filechooser.getSelectedFile().getAbsolutePath();

            // Call resizeImage with the path and null for byteImage
            ImageIcon resizedImage = resizeImage(path, null);

            // Check if resizedImage is not null before setting the icon
            if (resizedImage != null) {
                jLabel_image.setIcon(resizedImage);
                property_image_path = path; // Store the path of the selected image
            } else {
                JOptionPane.showMessageDialog(null, "Failed to load image.", "Error", JOptionPane.ERROR_MESSAGE);
            }
}
        
        
    }//GEN-LAST:event_jButton_browse_imagesActionPerformed

    private void jComboBox_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_typeActionPerformed

        //show propertyies in thejtable depends on the selected type 
        int typeId = map.get(jComboBox_type.getSelectedItem().toString());
         P_PROPERTY property = new P_PROPERTY();

        ArrayList<P_PROPERTY> propertyList = property.propertiesListByType(typeId);

        // the jtable colums   0    1       
        String[] colNames = {"ID", "Address"};

        //the jtable row
        //owneerList.size()=the 
        Object[][] rows = new Object[propertyList.size()][2];

        // add data from the list to the rows
        for (int i = 0; i < propertyList.size(); i++) {

            rows[i][0] = propertyList.get(i).getId();
            rows[i][1] = propertyList.get(i).getAddress();

        }
        DefaultTableModel model = new DefaultTableModel(rows, colNames);
        jTable_properties.setModel(model);
        
        
        
        
    }//GEN-LAST:event_jComboBox_typeActionPerformed

    private void jTable_propertiesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_propertiesMouseClicked
        // TODO add your handling code here:
        
        //grt theproperty id  from the jtable 
        //get the selected row index
        int rowIndex=jTable_properties.getSelectedRow();
        propertyId = Integer.valueOf(jTable_properties.getValueAt(rowIndex, 0).toString());
        
        //display the selected property Image list in the jlist 
        
      
        fillTypeList();
        
        
        
        
        
        
    }//GEN-LAST:event_jTable_propertiesMouseClicked

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        
        // try catch if the list isempty
        
        try {
            // display the selected iamge from the list to jlabel
        // we can use hashmap if we want to like in the preoperty window 
        // but here insted we will create a functioon to e=the mage ids 
        String selectedListItem = String.valueOf(jList1.getSelectedValue());
        Integer imageId=Integer.valueOf(selectedListItem);
        byte[] image=new P_PROPERTY().getImageId(imageId);
        jLabel_image.setIcon(resizeImage("",image));
            
        } catch (Exception e) {
        }
        
        
        
        
        
    }//GEN-LAST:event_jList1MouseClicked
// create a function to populate the jlist with the selected property Image id
    public void fillTypeList() {

        HashMap<byte[],Integer> imageListMap = new P_PROPERTY().propertiesImageList(propertyId);

        DefaultListModel listModel = new DefaultListModel();

        int i = 0;

        for (Integer id : imageListMap.values()) {

            listModel.add(i, id);
            i++;
        }
        jList1.setModel(listModel);

    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PROPERTY_IMAGES_WINDOW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PROPERTY_IMAGES_WINDOW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PROPERTY_IMAGES_WINDOW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PROPERTY_IMAGES_WINDOW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PROPERTY_IMAGES_WINDOW().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Remove_property;
    private javax.swing.JButton jButton_add_images;
    private javax.swing.JButton jButton_browse_images;
    private javax.swing.JButton jButton_show_images;
    private javax.swing.JComboBox<String> jComboBox_type;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel_image;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel_Tittle;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable_properties;
    // End of variables declaration//GEN-END:variables
}
